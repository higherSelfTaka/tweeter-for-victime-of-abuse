import {React, useEffect, useState} from 'react'
// components
import Head from 'next/head'
import Sidebar from '../components/Sidebar'
import Login from '../components/Login'
import Feed from '../components/Feed'
// tween on tweet modal
import Modal from '../components/Modal'
// simple tweet modal
import TweetModal from '../components/TweetModal'
import ProfileModel from '../components/ProfileModal'
import Input from '../components/Input'
import Post from '../components/Post'
import Widgets from '../components/Widgets'
import ProfileHeader from '../components/ProfileHeader'
// icons
import {SparklesIcon} from "@heroicons/react/24/outline"
// Session and  Recoil 
import {getProviders, getSession, useSession} from 'next-auth/react'
import { useRecoilState } from "recoil";
import { modalState, tweetModalState, profileModalState, memberIdState } from "../atoms/modalAtom";
// firebase 
import {
    collection,
    doc,
    onSnapshot,
    where,
    orderBy,
    query,
  } from "@firebase/firestore";
import {useRouter} from "next/router"
import {db} from '../firebase'



function Member({providers}) {
  
const {data:session}=useSession();
const [isOpen, setIsOpen] = useRecoilState(modalState);
const [isProfileOpen, setIsPofileOpen] = useRecoilState(profileModalState);
const [isOpenSideModal, setIsOpenSideModal]=useRecoilState(tweetModalState)
const [member, setMember]=useState()
const [posts, setPosts]=useState([])

// query param 
const router = useRouter();
console.log(router.query)
const {id} = router.query;



if(!session) return <Login providers={providers}/>


// more clean version 
useEffect(
  ()=>
  onSnapshot(
    query(collection(db, "posts"), 
    orderBy("timestamp", "desc")),
    (snapshot)=>{
      setPosts(snapshot.docs)
    }
  ),[db])


   

return (
    <div >
        <Head>
        <title>Twitter Victim</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className="bg-black min-h-screen flex max-w-[1500px] mx-auto">
        
        <Sidebar/>

        <div className="text-white flex-grow border-1 border-r 
        border-l border-gray-800 max-w-2xl sm:ml-[73px] xl:ml-[370px]">

        {/* top bar  */}
        <div className="text-[#9d9d9d] flex items-center sm:justify-between
        py-2 px-3 sticky top-0 z-50 bg-[#131313] border-b border-gray-800">
            <h2 className="text-lg sm:text-xl font-bold">Member Profile</h2> 
            <div className="hoverAnimation w-9 h-9 flex items-center justify-center xl:px-0 ml-auto">
          
            <SparklesIcon className="h-5 text-white"/>
            </div>
        </div>
            
          {/* Header part */}    
          <ProfileHeader memberId={id}/>
           {/* Input  */}
         
           {/* <Input/> */}

           <div className="pb-72">
                {posts.map(post=>(
                    <Post key={post.id} id={post.id} post={post.data()}/>
                ))
                }
           </div>
        </div>

        <Widgets/>

            {/* modal is for tweet on tweet */}
            {isOpen && <Modal/>}   
            {/* profile update */}
            {isProfileOpen && <ProfileModel/>}
            {/* simple tweet */}
            {isOpenSideModal && <TweetModal/>}

        </main>
      
    </div>
  )
}

export default Member



export async function getServerSideProps(context){
    //  const trendingResults = await fetch(`https://jsonkeeper.com/b/NKEV`).then(
    //    (res)=>res.json()
    //  );
    //  const followResults = await fetch(`https://jsonkeeper.com/b/WWMJ`).then(
    //    (res)=>res.json()
    //  );
     const providers=await getProviders();
     const session = await getSession(context)
  
     return {
       props:{
       //  trendingResults,
       //  followResults,
         providers,
         session,
       },
     };
   }