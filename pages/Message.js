import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Sidebar from '../components/Sidebar'
import Feed from '../components/Feed'
import Login from '../components/Login'
import Modal from '../components/Modal'
import TweetModal from '../components/TweetModal'
import Widgets from '../components/Widgets'

import {getProviders, getSession, useSession} from 'next-auth/react'
import { useRecoilState } from "recoil";
import { modalState,userIdState,tweetModalState, profileModalState} from "../atoms/modalAtom";
import MessageFeed from '../components/MessageFeed'

import {useRouter} from "next/router"

export default function Message({ providers}) {
const { data: session} = useSession();
const [isOpen, setIsOpen] = useRecoilState(modalState);
const [userId, setUserId]= useRecoilState(userIdState);
const [isOpenSideModal, setIsOpenSideModal]=useRecoilState(tweetModalState)
const [isProfileOpen, setIsPofileOpen] = useRecoilState(profileModalState);




if(!session) {
  return <Login providers={providers}/>
} else {
  setUserId(session.user.uid)
}

// query param 
const router = useRouter();
console.log('chat Id',router.query)
const {id} = router.query;


  return (
    
    <div className={styles.container}>
      <Head>
        <title>Twitter Victim</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-black min-h-screen flex max-w-[1500px] mx-auto">
      
        <Sidebar/>

        
           <MessageFeed/>  
        
     
         <Widgets/>
       
         {/* modal is for tweet on tweet */}
        {isOpen && <Modal/>}

        {isOpenSideModal && <TweetModal/>}

     
      </main>

    </div>
  
  );
}

 export async function getServerSideProps(context){
  //  const trendingResults = await fetch(`https://jsonkeeper.com/b/NKEV`).then(
  //    (res)=>res.json()
  //  );
  //  const followResults = await fetch(`https://jsonkeeper.com/b/WWMJ`).then(
  //    (res)=>res.json()
  //  );
   const providers=await getProviders();
   const session = await getSession(context)

   return {
     props:{
     //  trendingResults,
     //  followResults,
       providers,
       session,
     },
   };
 }